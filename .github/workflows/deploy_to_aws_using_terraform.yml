ame: deploy_to_aws_using_terraform

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'name of the Snyk team'
        required: true
        default: 'Snyk TSM APJ'
      country:
        description: 'Country'
        required: false

jobs:
  terraform:
    needs: refresh_container
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: snyk_aws_demo
    env:
      DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init ./terraform/ecs

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check ./terraform/ecs

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false ./terraform/ecs

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: |
      terraform apply -auto-approve -input=false
      terraform -chdir=./terraform/ecs apply \
        -var docker_img_name=${DOCKER_LOGIN}/my-snyk-demo-mvn-goof \
        -var docker_img_tag=latest \
        -auto-approve
      export ENDPOINT="$(terraform -chdir=./terraform/ecs output load_balancer_hostname)"
      mkdir -p /tmp/ecs/
      echo 'export ENDPOINT='${ENDPOINT} > /tmp/ecs/endpoint
